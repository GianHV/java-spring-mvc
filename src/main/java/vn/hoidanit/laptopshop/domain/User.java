package vn.hoidanit.laptopshop.domain;

import java.util.List;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import vn.hoidanit.laptopshop.service.validator.StrongPassword;

/**
 * Entity class that maps to the "users" table in the database.
 * 
 * This class provides the following functionalities:
 * 1. Maps Java objects to rows in the "users" table for CRUD operations.
 * 2. Validates fields like email, password, and fullname using annotations.
 * 3. Defines relationships with other entities like "Role" and "Order".
 * 4. Facilitates interactions with the database for managing user records.
 */
@Entity
@Table(name = "users")
public class User {

    // Primary key of the User entity, auto-generated by the database.
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    // Email of the user (must be a valid email address).
    @NotNull
    @Email(message = "Email không hợp lệ", regexp = "^[a-zA-Z0-9_!#$%&'*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$")
    private String email;

    // Password of the user (must meet certain security criteria).
    @NotNull
    @Size(min = 2, message = "Password phải có tối thiểu 2 ký tự")
    @StrongPassword()
    private String password;

    // Full name of the user.
    @NotNull
    @Size(min = 3, message = "Fullname phải có tối thiểu 3 ký tự")
    private String fullName;

    // Address of the user (optional).
    private String address;

    // Phone number of the user (optional).
    private String phone;

    // Avatar URL or image path for the user (optional).
    private String avatar;

    // User-Role relationship: A user has one role, and each role can have many users.
    @ManyToOne
    @JoinColumn(name = "role_id")
    private Role role;

    // User-Order relationship: A user can have many orders.
    @OneToMany(mappedBy = "user")
    List<Order> orders;

     @OneToOne(mappedBy = "user")
    private Cart cart;
    /*
     * Gets the ID of the user.
     * @return the ID of the user.
     */
    public long getId() {
        return id;
    }

    /*
     * Sets the ID of the user.
     * @param id the ID to be set for the user.
     */
    public void setId(long id) {
        this.id = id;
    }

    /*
     * Gets the email of the user.
     * @return the email of the user.
     */
    public String getEmail() {
        return email;
    }

    /*
     * Sets the email of the user.
     * @param email the email to be set for the user.
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /*
     * Gets the password of the user.
     * @return the password of the user.
     */
    public String getPassword() {
        return password;
    }

    /*
     * Sets the password of the user.
     * @param password the password to be set for the user.
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /*
     * Gets the full name of the user.
     * @return the full name of the user.
     */
    public String getFullName() {
        return fullName;
    }

    /*
     * Sets the full name of the user.
     * @param fullName the full name to be set for the user.
     */
    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    /*
     * Gets the address of the user.
     * @return the address of the user.
     */
    public String getAddress() {
        return address;
    }

    /*
     * Sets the address of the user.
     * @param address the address to be set for the user.
     */
    public void setAddress(String address) {
        this.address = address;
    }

    /*
     * Gets the phone number of the user.
     * @return the phone number of the user.
     */
    public String getPhone() {
        return phone;
    }

    /*
     * Sets the phone number of the user.
     * @param phone the phone number to be set for the user.
     */
    public void setPhone(String phone) {
        this.phone = phone;
    }

    /*
     * Gets the avatar of the user.
     * @return the avatar of the user.
     */
    public String getAvatar() {
        return avatar;
    }

    /*
     * Sets the avatar of the user.
     * @param avatar the avatar to be set for the user.
     */
    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }

    /*
     * Gets the role of the user.
     * @return the role of the user.
     */
    public Role getRole() {
        return role;
    }

    /*
     * Sets the role of the user.
     * @param role the role to be set for the user.
     */
    public void setRole(Role role) {
        this.role = role;
    }

    /*
     * Gets the orders associated with the user.
     * @return the orders of the user.
     */
    public List<Order> getOrders() {
        return orders;
    }

    /*
     * Sets the orders for the user.
     * @param orders the orders to be set for the user.
     */
    public void setOrders(List<Order> orders) {
        this.orders = orders;
    }
    public Cart getCart() {
        return cart;
    }

    public void setCart(Cart cart) {
        this.cart = cart;
    }
}
