package vn.hoidanit.laptopshop.domain;

import java.util.List;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;

/**
 * Entity class that maps to the "orders" table in the database.
 * 
 * This class provides the following functionalities:
 * 1. Maps Java objects to rows in the "orders" table for CRUD operations.
 * 2. Represents the order details such as total price and associated user.
 * 3. Establishes relationships between orders and users, and between orders and order details.
 */
@Entity
@Table(name = "orders")
public class Order {

    // Primary key of the Order entity, auto-generated by the database.
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    // Total price of the order.
    private double totalPrice;

    private String receiverName;

    private String receiverAddress;

    private String receiverPhone;

    private String status;

    // user id
    @ManyToOne
    @JoinColumn(name = "user_id")
    private User user;

    // One-to-many relationship: An order can have multiple order details.
    // The "mappedBy" attribute indicates the field in the OrderDetail entity that owns this relationship.
    @OneToMany(mappedBy = "order")
    private List<OrderDetail> orderDetails;

    /*
     * Gets the ID of the order.
     * @return the ID of the order.
     */
    public long getId() {
        return id;
    }

    /*
     * Sets the ID of the order.
     * @param id the ID to be set for the order.
     */
    public void setId(long id) {
        this.id = id;
    }

    /*
     * Gets the total price of the order.
     * @return the total price of the order.
     */
    public double getTotalPrice() {
        return totalPrice;
    }

    /*
     * Sets the total price of the order.
     * @param totalPrice the total price to be set for the order.
     */
    public void setTotalPrice(double totalPrice) {
        this.totalPrice = totalPrice;
    }

    public String getReceiverName() {
        return receiverName;
    }

    public void setReceiverName(String receiverName) {
        this.receiverName = receiverName;
    }

    public String getReceiverAddress() {
        return receiverAddress;
    }

    public void setReceiverAddress(String receiverAddress) {
        this.receiverAddress = receiverAddress;
    }

    public String getReceiverPhone() {
        return receiverPhone;
    }

    public void setReceiverPhone(String receiverPhone) {
        this.receiverPhone = receiverPhone;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public User getUser() {
        return user;
    }

    /*
     * Sets the user for the order.
     * @param user the user to be associated with the order.
     */
    public void setUser(User user) {
        this.user = user;
    }

    /*
     * Gets the list of order details associated with the order.
     * @return the list of order details.
     */
    public List<OrderDetail> getOrderDetails() {
        return orderDetails;
    }

    /*
     * Sets the list of order details for the order.
     * @param orderDetails the list of order details to be set.
     */
    public void setOrderDetails(List<OrderDetail> orderDetails) {
        this.orderDetails = orderDetails;
    }

    /*
     * Returns a string representation of the Order object.
     * Includes the ID and total price fields.
     * @return a string representation of the Order object.
     */
    @Override
    public String toString() {
        return "Order [id=" + id + ", totalPrice=" + totalPrice + "]";
    }

}
